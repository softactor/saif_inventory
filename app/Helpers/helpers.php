<?php

use App\Helpers\uuid;
use App\Models\Notification\Notification;
use App\Models\Settings\Setting;
use Carbon\Carbon as Carbon;

/**
 * Henerate UUID.
 *
 * @return uuid
 */
function generateUuid()
{
    return uuid::uuid4();
}

if (!function_exists('homeRoute')) {

    /**
     * Return the route to the "home" page depending on authentication/authorization status.
     *
     * @return string
     */
    function homeRoute()
    {
        if (access()->allow('view-backend')) {
            return 'admin.dashboard';
        } elseif (auth()->check()) {
            return 'frontend.user.dashboard';
        }

        return 'frontend.index';
    }
}

/*
 * Global helpers file with misc functions.
 */
if (!function_exists('app_name')) {
    /**
     * Helper to grab the application name.
     *
     * @return mixed
     */
    function app_name()
    {
        return config('app.name');
    }
}

if (!function_exists('access')) {
    /**
     * Access (lol) the Access:: facade as a simple function.
     */
    function access()
    {
        return app('access');
    }
}

if (!function_exists('history')) {
    /**
     * Access the history facade anywhere.
     */
    function history()
    {
        return app('history');
    }
}

if (!function_exists('gravatar')) {
    /**
     * Access the gravatar helper.
     */
    function gravatar()
    {
        return app('gravatar');
    }
}

if (!function_exists('includeRouteFiles')) {

    /**
     * Loops through a folder and requires all PHP files
     * Searches sub-directories as well.
     *
     * @param $folder
     */
    function includeRouteFiles($folder)
    {
        $directory = $folder;
        $handle = opendir($directory);
        $directory_list = [$directory];

        while (false !== ($filename = readdir($handle))) {
            if ($filename != '.' && $filename != '..' && is_dir($directory.$filename)) {
                array_push($directory_list, $directory.$filename.'/');
            }
        }

        foreach ($directory_list as $directory) {
            foreach (glob($directory.'*.php') as $filename) {
                require $filename;
            }
        }
    }
}

if (!function_exists('getRtlCss')) {

    /**
     * The path being passed is generated by Laravel Mix manifest file
     * The webpack plugin takes the css filenames and appends rtl before the .css extension
     * So we take the original and place that in and send back the path.
     *
     * @param $path
     *
     * @return string
     */
    function getRtlCss($path)
    {
        $path = explode('/', $path);
        $filename = end($path);
        array_pop($path);
        $filename = rtrim($filename, '.css');

        return implode('/', $path).'/'.$filename.'.rtl.css';
    }
}

if (!function_exists('settings')) {
    /**
     * Access the settings helper.
     */
    function settings()
    {
        // Settings Details
        $settings = Setting::latest()->first();
        if (!empty($settings)) {
            return $settings;
        }
    }
}

if (!function_exists('createNotification')) {
    /**
     * create new notification.
     *
     * @param  $message    message you want to show in notification
     * @param  $userId     To Whom You Want To send Notification
     *
     * @return object
     */
    function createNotification($message, $userId)
    {
        $notification = new Notification();

        return $notification->insert([
            'message'    => $message,
            'user_id'    => $userId,
            'type'       => 1,
            'created_at' => Carbon::now(),
        ]);
    }
}

if (!function_exists('escapeSlashes')) {
    /**
     * Access the escapeSlashes helper.
     */
    function escapeSlashes($path)
    {
        $path = str_replace('\\', DIRECTORY_SEPARATOR, $path);
        $path = str_replace('//', DIRECTORY_SEPARATOR, $path);
        $path = trim($path, DIRECTORY_SEPARATOR);

        return $path;
    }
}

if (!function_exists('getMenuItems')) {
    /**
     * Converts items (json string) to array and return array.
     */
    function getMenuItems($type = 'backend', $id = null)
    {
        $menu = new \App\Models\Menu\Menu();
        $menu = $menu->where('type', $type);
        if (!empty($id)) {
            $menu = $menu->where('id', $id);
        }
        $menu = $menu->first();
        if (!empty($menu) && !empty($menu->items)) {
            return json_decode($menu->items);
        }

        return [];
    }
}

if (!function_exists('getRouteUrl')) {
    /**
     * Converts querystring params to array and use it as route params and returns URL.
     */
    function getRouteUrl($url, $url_type = 'route', $separator = '?')
    {
        $routeUrl = '';
        if (!empty($url)) {
            if ($url_type == 'route') {
                if (strpos($url, $separator) !== false) {
                    $urlArray = explode($separator, $url);
                    $url = $urlArray[0];
                    parse_str($urlArray[1], $params);
                    $routeUrl = route($url, $params);
                } else {
                    $routeUrl = route($url);
                }
            } else {
                $routeUrl = $url;
            }
        }

        return $routeUrl;
    }
}

if (!function_exists('renderMenuItems')) {
    /**
     * render sidebar menu items after permission check.
     */
    function renderMenuItems($items, $viewName = 'backend.includes.partials.sidebar-item')
    {
        foreach ($items as $item) {
            // if(!empty($item->url) && !Route::has($item->url)) {
            //     return;
            // }
            if (!empty($item->view_permission_id)) {
                if (access()->allow($item->view_permission_id)) {
                    echo view($viewName, compact('item'));
                }
            } else {
                echo view($viewName, compact('item'));
            }
        }
    }
}

if (!function_exists('isActiveMenuItem')) {
    /**
     * checks if current URL is of current menu/sub-menu.
     */
    function isActiveMenuItem($item, $separator = '?')
    {
        $item->clean_url = $item->url;
        if (strpos($item->url, $separator) !== false) {
            $item->clean_url = explode($separator, $item->url, -1);
        }
        if (Active::checkRoutePattern($item->clean_url)) {
            return true;
        }
        if (!empty($item->children)) {
            foreach ($item->children as $child) {
                $child->clean_url = $child->url;
                if (strpos($child->url, $separator) !== false) {
                    $child->clean_url = explode($separator, $child->url, -1);
                }
                if (Active::checkRoutePattern($child->clean_url)) {
                    return true;
                }
            }
        }

        return false;
    }
}

if (!function_exists('checkDatabaseConnection')) {

    /**
     * @return bool
     */
    function checkDatabaseConnection()
    {
        try {
            DB::connection()->reconnect();

            return true;
        } catch (Exception $ex) {
            return false;
        }
    }
}
// GET TABLE DATA BY TABLE NAME:

function get_table_data_by_table($table, $order_by  =   null){
    $result     =    DB::table($table);
    if(isset($order_by['order_by'])){
        $result->orderBy($order_by['order_by_column'], $order_by['order_by']);
    }
    return $result->get();
}

function get_data_name_by_where($table,$where){
    return DB::table($table)->where($where)->get();
}

function get_product_name_by_product_id($product_id){
    return DB::table('inv_material')->where('id', $product_id)->first();
}

function getProductUnitWithProductId($product_id){
    return DB::table('inv_material as p')
            ->select('u.unit_name')
            ->where('p.id', $product_id)
            ->join('inv_item_unit as u', 'u.id', '=', 'p.qty_unit')
            ->first()->unit_name;
    
}

function get_product_with_category() {
    $final_array = [];
    $category = DB::table('items')->get();
    if (!$category->isEmpty()) {
        foreach ($category as $cat) {
            $inv_materialcategory = DB::table('inv_materialcategory')->where('category_id', $cat->id)->get();
            if (!$inv_materialcategory->isEmpty()) {
                foreach ($inv_materialcategory as $meta_cat) {
                    $inv_material = DB::table('inv_material')->where('material_id', $cat->id)->where('material_sub_id', $meta_cat->id)->get();
                    if (!$inv_material->isEmpty()) {
                        foreach ($inv_material as $material) {
                            $final_array[] = [
                                'id'                    => $material->id,
                                'material_id'           => $material->material_id,
                                'material_name'         => $cat->name,
                                'material_sub_id'       => $material->material_sub_id,
                                'material_sub_name'     => $meta_cat->material_sub_description,
                                'material_description'  => $material->material_description,
                                'material_name'         => $material->material_description.' ('.$cat->name.' - '.$meta_cat->material_sub_description.' - '.$material->material_description.')',
                            ];
                        }
                    }
                }
            }
        }
    }
    
    return $final_array;
}
/*******************************************************************************
 * To get the default category code:
 * Params: 
 * $table       =   from which table;
 * $fieldName   =   which table column field to be increased,
 * $modifier    =   default modifier like 02d or 03d
 * $defaultCode =   01 or 001
 * *****************************************************************************
 */
function getDefaultCategoryCode($table, $fieldName, $modifier, $defaultCode){
    $lastRows   =   DB::table($table)->orderBy('id', 'desc')->first();
    if(isset($lastRows) && !empty($lastRows)){
        $number = intval($lastRows->{$fieldName}) + 1;
        return sprintf('%'.$modifier, $number);
    }
    return $defaultCode;    
}

function getTableRawDetails($tablename, $row_id){
    return DB::table($tablename)->where('id', $row_id)->first();
}
/*
 * This methid is used to get Parent name and Subparent Name
 * by the material id
 * can be call able from any where
 * Created Date: 07/05/2019
 * Created By: Tanveer Qureshee
 * 
 */
function get_parent_and_subparent_by_material_id($material_id) {
    $return = false;
    $data = DB::table('items as i')
            ->join('inv_materialcategory as imc', 'i.id', '=', 'imc.category_id')
            ->join('inv_material as im', 'imc.id', '=', 'im.material_sub_id')
            ->join('inv_item_unit as iiu', 'im.qty_unit', '=', 'iiu.id')
            ->where('im.id', '=', $material_id)
            ->select('i.name','i.id as parent_id','imc.material_sub_description','imc.id as sub_id', 'im.material_description', 'iiu.unit_name as unit_name')
            ->first();

    if (isset($data) && !empty($data)) {
        $return = $data;
    }

    return $return;
}

/*
 * This methid is used to get Parent name and Subparent Name
 * by the material id
 * can be call able from any where
 * Created Date: 07/05/2019
 * Created By: Tanveer Qureshee
 * 
 */
function get_product_stock_by_material_id($param) {
    $return = false;
    $receiveData = DB::table('inv_materialbalance')
            ->select(DB::raw('mb_materialid, sum(mbin_qty) as receiveTotal, sum(mbout_qty) as issueTotal, mbin_qty, mbin_val, mbout_qty, mbout_val, mbprice'))
            ->where('mb_materialid', $param['where']['mb_materialid'])
            ->where('mb_date', '>=', $param['where']['mb_date_from'])
            ->where('mbtype', 'Receive')
            ->first();
    $issueData = DB::table('inv_materialbalance')
            ->select(DB::raw('mb_materialid, sum(mbin_qty) as receiveTotal, sum(mbout_qty) as issueTotal, mbin_qty, mbin_val, mbout_qty, mbout_val, mbprice'))
            ->where('mb_materialid', $param['where']['mb_materialid'])
            ->where('mb_date', '>=', $param['where']['mb_date_from'])
            ->where('mbtype', 'Issue')
            ->first();
    $feedbackData   =   [];
    if(isset($receiveData) && !empty($receiveData)){
        $feedbackData   =   [
            'mb_materialid' => $receiveData->mb_materialid,
            'receiveTotal'  => $receiveData->receiveTotal,
            'issueTotal'    => $receiveData->issueTotal,
            'mbin_qty'      => $receiveData->mbin_qty,
            'mbin_val'      => $receiveData->mbin_val,
            'mbout_qty'     => ((isset($issueData->mbout_qty) && !empty($issueData->mbout_qty)) ? $issueData->mbout_qty: 0),
            'mbout_val'     => ((isset($issueData->mbout_val) && !empty($issueData->mbout_val)) ? $issueData->mbout_val: 0),
            'mbprice'       => $receiveData->mbprice,
            'quantity'      => ((isset($issueData->mbout_qty) && !empty($issueData->mbout_qty)) ? ($receiveData->mbin_qty-$issueData->mbout_qty): $receiveData->mbin_qty),
        ];
    }
    
    if (isset($feedbackData) && !empty($feedbackData)) {
        $return = $feedbackData;
    }

    return $return;
}